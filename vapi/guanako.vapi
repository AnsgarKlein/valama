/* guanako.vapi generated by valac 0.22.1, do not modify. */

namespace Vala {
	[CCode (cheader_filename = "guanako.h")]
	public class ParserExt : Vala.CodeVisitor {
		public ParserExt ();
		public void parse (Vala.CodeContext context);
		public void parse_file (Vala.SourceFile source_file);
		public override void visit_source_file (Vala.SourceFile source_file);
		public Vala.HashMap<string,Vala.HashSet<string>> used_defines { get; private set; }
	}
	[CCode (cheader_filename = "guanako.h")]
	public class ScannerExt {
		public ScannerExt (Vala.SourceFile source_file);
		public static Vala.TokenType get_identifier_or_keyword (char* begin, int len);
		public void parse_file_comments ();
		public Vala.Comment? pop_comment ();
		public Vala.TokenType read_regex_token (out Vala.SourceLocation token_begin, out Vala.SourceLocation token_end);
		public Vala.TokenType read_template_token (out Vala.SourceLocation token_begin, out Vala.SourceLocation token_end);
		public Vala.TokenType read_token (out Vala.SourceLocation token_begin, out Vala.SourceLocation token_end);
		public void seek (Vala.SourceLocation location);
		public Vala.SourceFile source_file { get; private set; }
		public Vala.Set<string> used_defines { get; private set; }
	}
}
namespace Guanako {
	namespace Refactoring {
		[CCode (cheader_filename = "guanako.h")]
		public static Vala.Symbol? find_declaration (Guanako.Project project, Vala.SourceFile sf, int line, int col);
		[CCode (cheader_filename = "guanako.h")]
		public static Vala.SourceReference[] find_references (Guanako.Project project, Vala.SourceFile sf, Vala.Symbol symbol);
	}
	[CCode (cheader_filename = "guanako.h")]
	public class CompletionProposal {
		public int replace_length;
		public Vala.Symbol symbol;
		public CompletionProposal (Vala.Symbol smb, int rep_length);
	}
	[CCode (cheader_filename = "guanako.h")]
	public class FrankenStein {
		public class FrankenStop {
			public bool active;
			public Vala.SourceFile file;
			public int line;
			public FrankenStop (Vala.SourceFile file, int line, bool active);
		}
		public class FrankenTimer {
			public bool active;
			public int end_line;
			public Vala.SourceFile file;
			public int start_line;
			public FrankenTimer (Vala.SourceFile file, int start_line, int end_line, bool active);
		}
		public bool activate_frankenline;
		public Gee.ArrayList<Guanako.FrankenStein.FrankenStop?> frankenstops;
		public Gee.ArrayList<Guanako.FrankenStein.FrankenTimer?> frankentimers;
		public Guanako.Project project;
		public FrankenStein ();
		public string frankensteinify_sourcefile (Vala.SourceFile file);
		public string frankenstein_mainblock { get; private set; }
		public signal void line_reached (int line, string filename);
		public signal void received_invalid_id ();
		public signal void stop_reached (Guanako.FrankenStein.FrankenStop stop, int stop_id);
		public signal void timer_finished (Guanako.FrankenStein.FrankenTimer timer, int timer_id, double time);
	}
	[CCode (cheader_filename = "guanako.h")]
	public class Project {
		public class CompletionRun {
			public Gee.LinkedList<Vala.Symbol> cur_stack;
			public CompletionRun (Guanako.Project parent_project);
			public void abort_run ();
			public Gee.TreeSet<Guanako.CompletionProposal>[]? run (Vala.SourceFile file, int line, int col, string written);
		}
		public class ProposalSet {
			public Gee.TreeSet<Guanako.CompletionProposal>[] comp_sets;
			public ProposalSet ();
			public void add (Guanako.CompletionProposal prop);
			public void add_all (Guanako.Project.ProposalSet add_set);
			public void wait_for_finish ();
		}
		public delegate void DefineAction (string define);
		public Project (string? filename = null, int glib_major = 2, int glib_minor = 18) throws GLib.IOError, GLib.Error;
		public bool add_define (string define);
		public string[] add_packages (string[] package_names, bool auto_update);
		public Vala.SourceFile? add_source_file_by_name (string filename, bool is_vapi = false);
		public void commit_defines ();
		public static void context_prep (Vala.CodeContext context, int? glib_major = null, int? glib_minor = null, Guanako.Project.DefineAction? action = null);
		public Vala.Symbol[] get_accessible_symbols (Vala.SourceFile file, int line, int col);
		public Vala.List<string> get_context_packages ();
		public string? get_context_vapi_path (string package);
		public Vala.Map<string,Vala.Set<string>> get_defines_used ();
		public Gee.ArrayList<Guanako.Reporter.Error> get_errorlist ();
		public int[] get_glib_version ();
		public string[] get_package_dependencies (string[] package_names);
		public Vala.SourceFile? get_source_file (string filename);
		public Vala.SourceFile? get_source_file_by_name (string filename);
		public Vala.SourceFile[] get_source_files ();
		public Vala.Symbol? get_symbol_at_pos (Vala.SourceFile source_file, int line, int col);
		public Vala.SourceFile[] get_vapis ();
		public void init ();
		public bool remove_define (string define);
		public bool remove_defines (string[] defines);
		public bool remove_file (Vala.SourceFile file);
		public bool remove_files (Vala.SourceFile[] files);
		public void remove_package (string package_name);
		public void set_glib_version (int glib_major, int glib_minor);
		public void set_reporter (GLib.Type reptype);
		public void update ();
		public void update_file (Vala.SourceFile file, string? new_content = null);
		public Gee.TreeSet<string> defines { get; private set; }
		public Gee.TreeSet<string> defines_manual { get; private set; }
		public Gee.TreeSet<string> packages { get; private set; }
		public Vala.Symbol root_symbol { get; }
		public Gee.TreeSet<Vala.SourceFile> sourcefiles { get; private set; }
	}
	[CCode (cheader_filename = "guanako.h")]
	public class Reporter : Vala.Report {
		public class Error : GLib.Object {
			public string message;
			public Vala.SourceReference source;
			public Guanako.ReportType type;
			public Error (Vala.SourceReference source, string message, Guanako.ReportType type);
		}
		public Reporter ();
		protected override void depr (Vala.SourceReference? source, string message);
		protected override void err (Vala.SourceReference? source, string message);
		protected override void note (Vala.SourceReference? source, string message);
		public void reset_file (string filename);
		protected virtual void show_deprecated (Vala.SourceReference? source, string message);
		protected virtual void show_error (Vala.SourceReference? source, string message);
		protected virtual void show_experimental (Vala.SourceReference? source, string message);
		protected virtual void show_note (Vala.SourceReference? source, string message);
		protected virtual void show_warning (Vala.SourceReference? source, string message);
		protected override void warn (Vala.SourceReference? source, string message);
		public virtual Gee.ArrayList<Guanako.Reporter.Error> errlist { get; protected set; }
	}
	[CCode (cheader_filename = "guanako.h")]
	public class SymbolVisitor : Vala.CodeVisitor {
		public SymbolVisitor (Guanako.iter_callback callback);
		public override void visit_class (Vala.Class cl);
		public override void visit_constant (Vala.Constant c);
		public override void visit_delegate (Vala.Delegate d);
		public override void visit_enum (Vala.Enum en);
		public override void visit_enum_value (Vala.EnumValue ev);
		public override void visit_error_code (Vala.ErrorCode ecode);
		public override void visit_error_domain (Vala.ErrorDomain edomain);
		public override void visit_field (Vala.Field f);
		public override void visit_interface (Vala.Interface iface);
		public override void visit_local_variable (Vala.LocalVariable local);
		public override void visit_method (Vala.Method m);
		public override void visit_namespace (Vala.Namespace ns);
		public override void visit_property (Vala.Property prop);
		public override void visit_signal (Vala.Signal sig);
		public override void visit_source_file (Vala.SourceFile source_file);
		public override void visit_struct (Vala.Struct st);
	}
	[CCode (cheader_filename = "guanako.h")]
	public enum IterCallbackReturns {
		CONTINUE,
		ABORT_BRANCH,
		ABORT_TREE
	}
	[CCode (cheader_filename = "guanako.h")]
	[Flags]
	public enum ReportType {
		ERROR,
		WARNING,
		DEPRECATED,
		EXPERIMENTAL,
		NOTE;
		public string? to_string ();
		public const Guanako.ReportType ALL;
	}
	[CCode (cheader_filename = "guanako.h")]
	public delegate Guanako.IterCallbackReturns iter_callback (Vala.Symbol symbol, int depth);
	[CCode (cheader_filename = "guanako.h")]
	public delegate Guanako.IterCallbackReturns iter_expression_callback (Vala.Expression expression, int depth);
	[CCode (cheader_filename = "guanako.h")]
	public delegate Guanako.IterCallbackReturns iter_statement_callback (Vala.Statement statement, int depth);
	[CCode (cheader_filename = "guanako.h")]
	public static bool debug;
	[CCode (cheader_filename = "guanako.h")]
	public static bool after_source_ref (Vala.SourceFile source_file, int source_line, int source_col, Vala.SourceReference? reference);
	[CCode (cheader_filename = "guanako.h")]
	public static string auto_indent_buffer (Guanako.Project project, Vala.SourceFile file);
	[CCode (cheader_filename = "guanako.h")]
	public static bool before_source_ref (Vala.SourceFile source_file, int source_line, int source_col, Vala.SourceReference? reference);
	[CCode (cheader_filename = "guanako.h")]
	public static int compare_string_case_insensitive (string a, string b);
	[CCode (cheader_filename = "guanako.h")]
	public static string? discover_vapi_file (string needle_namespace);
	[CCode (cheader_filename = "guanako.h")]
	public static Gee.MultiMap<string,string> get_available_packages ();
	[CCode (cheader_filename = "guanako.h")]
	public static string? get_deps_path (string pkg, string[]? directories = null);
	[CCode (cheader_filename = "guanako.h")]
	public static Vala.Namespace? get_parent_namespace (Vala.Symbol smb);
	[CCode (cheader_filename = "guanako.h")]
	public static Gee.BidirList<string> get_vapi_dirs ();
	[CCode (cheader_filename = "guanako.h")]
	public static string? get_vapi_path (string pkg, string[]? directories = null);
	[CCode (cheader_filename = "guanako.h")]
	public static void init (bool reload = false);
	[CCode (cheader_filename = "guanako.h")]
	public static bool inside_source_ref (Vala.SourceFile source_file, int source_line, int source_col, Vala.SourceReference? reference);
	[CCode (cheader_filename = "guanako.h")]
	public static bool iter_expressions (Vala.Statement statement, Guanako.iter_expression_callback callback, int depth = 0);
	[CCode (cheader_filename = "guanako.h")]
	public static bool iter_statement (Vala.Statement statement, Guanako.iter_statement_callback callback, int depth = 0, string typename = "");
	[CCode (cheader_filename = "guanako.h")]
	public static void iter_subroutine (Vala.Subroutine subroutine, Guanako.iter_statement_callback callback);
	[CCode (cheader_filename = "guanako.h")]
	public static bool iter_symbol (Vala.Symbol smb, Guanako.iter_callback callback, int depth = 0);
	[CCode (cheader_filename = "guanako.h")]
	public static bool load_available_packages (bool reload = false);
	[CCode (cheader_filename = "guanako.h")]
	public static bool load_vapi_dirs (bool reload = false);
	[CCode (cheader_filename = "guanako.h")]
	public static string symbolsig_to_string (Vala.Symbol smb, bool? fullsig = false, bool? fullname = false, string format = " ", string formatfst = "", string formatlst = "");
	[CCode (cheader_filename = "guanako.h")]
	public static string symboltype_to_string (Vala.Symbol smb);
}
