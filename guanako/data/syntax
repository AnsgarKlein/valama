#
# This file is part of Guanako
#
# Copyright (C) 2012, 2013, Valama development team
#

init_method
?_ $MetaLeftSide|$VarStatement|$IfStatement|$WhileStatement|$ForeachStatement

init_deep_space
?_ $UsingStatement

# Using

UsingStatement
using _ {@}>Namespace{child} ?$NamespaceChild{child} ?_ ;

NamespaceChild : parent
. {parent}>Namespace{child} ?$NamespaceChild{child}


# ==============
# All kinds of statements
# ==============

IfStatement
if ?_ ( ?_ $BoolExp ?_ )

WhileStatement
while ?_ ( ?_ $BoolExp ?_ )

ForeachStatement
foreach ?_ ( ?_ $Type _ *word _ in _ $Value ?_ )


BoolExp
$BoolExpComp|$BoolExpNeg|$BoolExpBrackets|$BoolExpAnd
#|$BoolExpOr

BoolExpComp
$Value _ $BoolExpValComp|$BoolExpTypeComp

BoolExpValComp
==|<=|>=|!= _ $Value

BoolExpTypeComp
is _ $Type

BoolExpNeg
! ?_ ( ?_ $BoolExp ?_ )

#BoolExpOr
#$BoolExp _ || _ $BoolExp

BoolExpAnd
$BoolExpComp|$BoolExpNeg|$BoolExpBrackets _ && _ $BoolExp

BoolExpBrackets
( ?_ $BoolExp ?_ )

# ==============
# var declaration
# ==============

VarStatement
var _ *word $AssgEndAssg


# ==============
# Big rule covering function calls, signal connecting and assignments
# ==============

MetaLeftSide
$AssgInst{@}|$AssgStat{@}

AssgIterInst : parent
. $AssgInst{parent}

AssgIterStat : parent
. $AssgStat{parent}

AssgInst : parent
$AssgInstContinue{parent}|$AssgChildSignalConnect{parent}
AssgInstContinue : parent
$ChildVariableInst{parent}>{a}|$ChildPropertyInst{parent}>{a}|$AssgChildMethodInst{parent} $AssgIterInst{a}|$AssgEndAssg

AssgStat : parent
$AssgChildStuffStat{parent}|$AssgChildVariablesStat{parent}|$AssgChildMethodStat{parent}

AssgChildStuffStat : parent
{parent}>Namespace{a}|{parent}>Class{a}|{parent}>Struct{a} $AssgIterStat{a}|$MLSdeclaration

AssgChildVariablesStat : parent
$ChildVariableStat{parent}>{a}|$ChildPropertyStat{parent}>{a} $AssgIterInst{a}|$AssgEndAssg

# TODO: Handle arrays
AssgChildMethodStat : parent
{parent}>Method<static>{a} push_cur>{a} ?_ $ParamBrackets pop_cur>{a} ?_ $AssgIterInst{a}|;

AssgChildMethodInst : parent
{parent}>Method<instance>{a} push_cur>{a} ?_ $ParamBrackets pop_cur>{a} ?_ $AssgIterInst{a}|;

AssgChildSignalConnect : parent
{parent}>Signal{a} .connect ?_ ( ?_ $MethodName ?_ ) ?_ ;

AssgEndAssg
?_ = ?_ $Value|$NewType ?_ ;

MLSdeclaration
?_ *word $AssgEndAssg

# ==============
# Parameter brackets (e.g. for method calls)
# ==============

ParamBrackets
( ?_ ?$ParamBracketsChild ?_ )
ParamBracketsChild
$Value ?$ParamBracketsIter
ParamBracketsIter
?_ , ?_ $ParamBracketsChild


# ==============
# A value that could be used for assignments etc
# ==============

Value
$ValInst{@}|$ValStat{@}|$ValString|$ValNumber

ValString
" *string "

ValNumber
*number ?$ValNumberDecimal ?f

ValNumberDecimal
. *number

ValIterInst : parent
. $ValInst{parent}

ValIterStat : parent
. $ValStat{parent}

ValInst : parent
$ChildVariableInst{parent}>{a}|$ChildPropertyInst{parent}>{a}|$ValChildMethodInst{parent}|$ChildConstInst{parent}>{a} ?$ValIterInst{a}

ValStat : parent
$ValChildStuffStat{parent}|$ValChildVariablesStat{parent}|$ValChildMethodStat{parent}

ValChildStuffStat : parent
{parent}>Namespace{a}|{parent}>Class{a} $ValIterStat{a}

ValChildVariablesStat : parent
$ChildVariableStat{parent}>{a}|$ChildPropertyStat{parent}>{a}|$ChildConstStat{parent}>{a}|{parent}>Enum{a} ?$ValIterInst{a}

# TODO: Handle arrays
ValChildMethodStat : parent
{parent}>Method<static>{a} push_cur>{a} ?_ $ParamBrackets pop_cur>{a} ?_ ?$ValIterInst{a}

ValChildMethodInst : parent
{parent}>Method<instance>{a} push_cur>{a} ?_ $ParamBrackets pop_cur>{a} ?_ ?$ValIterInst{a}


# ==============
# An instance creation
# ==============

# TODO: Correct struct initialization
NewType
new _ $Type>{a} ?$NewTypeCreationCall{a} ?_ $ParamBrackets

NewTypeCreationCall : parent
. {parent}>CreationMethod


# ==============
# A class or a struct
# ==============

Type
$TypeNamespace{@}>{ret}|$TypeClass{@}>{ret}

TypeIter : parent
. $TypeNamespace{parent}>{ret}|$TypeClass{parent}>{ret}

TypeNamespace : parent
{parent}>Namespace{a} $TypeIter{a}>{ret}

TypeClass : parent
{parent}>Class{ret}|{parent}>Struct{ret} ?$TypeIter{ret}>{ret}


# ==============
# Only the name of a method (e.g. for connecting a signal to it)
# ==============

MethodName
$MethodNameStat{@}|$MethodNameInst{@}|{@}>Method

MethodNameStat : parent
$MethodNameStatClasses{parent}|$MethodNameStatVariables{parent}

MethodNameStatClasses : parent
{parent}>Namespace{a}|{parent}>Class{a} . $MethodNameStat{a}|{a}>Method<static>
MethodNameStatVariables : parent
{parent}>Variable<static>{a}|{parent}>Property<static>{a} . $MethodNameInst{a}|{a}>Method<instance>

MethodNameInst : parent
{parent}>Variable<instance>{a}|{parent}>Property<instance>{a} . $MethodNameInst{a}|{a}>Method<instance>


# ==============
# Helper functions to abstract single vs array types
# ==============

ChildConstInst : parent
{parent}>Constant<instance,array>{ret}|{parent}>Constant<instance,single>{ret}|$ChildConstInstArrEl{parent}>{ret}
ChildConstInstArrEl : parent
{parent}>Constant<instance,arr_el>{ret} ?_ [ ?_ $Value ?_ ]

ChildConstStat : parent
{parent}>Constant<instance,array>{ret}|{parent}>Constant<instance,single>{ret}|$ChildConstStatArrEl{parent}>{ret}
ChildConstStatArrEl : parent
{parent}>Constant<instance,arr_el>{ret} ?_ [ ?_ $Value ?_ ]

ChildVariableInst : parent
{parent}>Variable<instance,array>{ret}|{parent}>Variable<instance,single>{ret}|$ChildVariableInstArrEl{parent}>{ret}
ChildVariableInstArrEl : parent
{parent}>Variable<instance,arr_el>{ret} ?_ [ ?_ $Value ?_ ]

ChildVariableStat : parent
{parent}>Variable<static,array>{ret}|{parent}>Variable<static,single>{ret}|$ChildVariableStatArrEl{parent}>{ret}
ChildVariableStatArrEl : parent
{parent}>Variable<static,arr_el>{ret} ?_ [ ?_ $Value ?_ ]

ChildPropertyInst : parent
{parent}>Property<instance,array>{ret}|{parent}>Property<instance,single>{ret}|$ChildPropertyInstArrEl{parent}>{ret}
ChildPropertyInstArrEl : parent
{parent}>Property<instance,arr_el>{ret} ?_ [ ?_ $Value ?_ ]

ChildPropertyStat : parent
{parent}>Property<static,array>{ret}|{parent}>Property<static,single>{ret}|$ChildPropertyStatArrEl{parent}>{ret}
ChildPropertyStatArrEl : parent
{parent}>Property<static,arr_el>{ret} ?_ [ ?_ $Value ?_ ]

